openapi: "3.0.0"
info:
  title: Pasta
  description: This is a sample server for Pasta
  version: 0.0.1
servers:
  - url: /v1
tags:
  - name: Product
    description: Products
  - name: Meal
    description: Meals
  - name: ShoppingList
    description: ShoppingLists
paths:
  /products:
    get:
      operationId: getProducts
      responses:
        '200':
          description: "Lists all Products"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Product"
    post:
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: "Create Product"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
      tags:
        - Product
  /products/{productId}:
    get:
      operationId: getProduct
      responses:
        '200':
          description: "Get Product"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        '404':
          description: 'Does not exist'
    put:
      operationId: editProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: "Edit Product"
        '404':
          description: 'Does not exist'
    delete:
      operationId: deleteProduct
      responses:
        '204':
          description: "Delete Product"
      tags:
        - Product
    parameters:
      - in: path
        name: productId
        required: true
        schema:
          type: integer
          format: int64
  /meals:
    get:
      operationId: getMeals
      responses:
        '200':
          description: "Lists all Meals"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Meal"
    post:
      operationId: createMeal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Meal'
        required: true
      responses:
        '200':
          description: "Create Meal"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meal"
      tags:
        - Meal
  /meals/{mealId}:
    get:
      operationId: getMeal
      responses:
        '200':
          description: "Get Meal"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Meal"
        '404':
          description: 'Does not exist'
    put:
      operationId: editMeal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Meal'
        required: true
      responses:
        '200':
          description: "Edit Meal"
        '404':
          description: 'Does not exist'
    delete:
      operationId: deleteMeal
      responses:
        '204':
          description: "Delete Meal"
      tags:
        - Meal
    parameters:
      - in: path
        name: mealId
        required: true
        schema:
          type: integer
          format: int64
  /meals/{mealId}/entries:
    get:
      operationId: getMealEntries
      responses:
        '200':
          description: "Lists all Product Entries for a Meal"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProductEntry"
    post:
      operationId: addMealEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductEntry'
        required: true
      responses:
        '200':
          description: "Edit Meal"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductEntry"
        '404':
          description: 'Does not exist'
    parameters:
      - in: path
        name: mealId
        required: true
        schema:
          type: integer
          format: int64
  /meals/{mealId}/entries/{entryId}:
    put:
      operationId: updateMealEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductEntry'
        required: true
      responses:
        '200':
          description: "Update Meal Product Entry"
    delete:
      operationId: deleteMealEntry
      responses:
        '204':
          description: "Delete Entry"
      tags:
        - Meal
    parameters:
      - in: path
        name: mealId
        required: true
        schema:
          type: integer
          format: int64
      - in: path
        name: entryId
        required: true
        schema:
          type: integer
          format: int64
  /shoppingLists/{shoppingListId}:
    get:
      operationId: getShoppingList
      responses:
        '200':
          description: "Lists a Shopping List"
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/ShoppingList"
        '404':
          description: "No Shopping List found"
      tags:
        - ShoppingList
      parameters:
        - in: path
          name: shoppingListId
          required: true
          schema:
            type: integer
            format: int64
  /shoppingLists/{shoppingListId}/entries:
    get:
      operationId: getShoppingListEntries
      responses:
        '200':
          description: "Lists all Product Entries for a Shopping List"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProductEntry"
    post:
      operationId: addShoppingListEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductEntry'
        required: true
      responses:
        '200':
          description: "?"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductEntry"
        '404':
          description: 'Does not exist'
    parameters:
      - in: path
        name: shoppingListId
        required: true
        schema:
          type: integer
          format: int64

  /shoppingLists/{shoppingListId}/entries/{entryId}:
    put:
      operationId: updateShoppingListEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductEntry'
        required: true
      responses:
        '200':
          description: "Update Shopping List Product Entry"
    delete:
      operationId: deleteShoppingListEntry
      responses:
        '204':
          description: "Delete Entry"
      tags:
        - Meal
    parameters:
      - in: path
        name: shoppingListId
        required: true
        schema:
          type: integer
          format: int64
      - in: path
        name: entryId
        required: true
        schema:
          type: integer
          format: int64
  /shoppingLists/{shoppingListId}/meals:
    get:
      operationId: getShoppingListMeals
      responses:
        '200':
          description: "Lists all Meals for a Shopping List"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Meal"
    parameters:
      - in: path
        name: shoppingListId
        required: true
        schema:
          type: integer
          format: int64
  /shoppingLists/{shoppingListId}/meals/{mealId}:
    put:
      operationId: addMealToShoppingList
      responses:
        '200':
          description: "Add Meal To Shopping List"
    delete:
      operationId: deleteMealFromShoppingList
      responses:
        '204':
          description: "Delete Meal From Shopping List"
      tags:
        - Meal
    parameters:
      - in: path
        name: shoppingListId
        required: true
        schema:
          type: integer
          format: int64
      - in: path
        name: mealId
        required: true
        schema:
          type: integer
          format: int64

  /shoppingLists/{shoppingListId}/items:
    get:
      operationId: getShoppingListItems
      responses:
        '200':
          description: "Lists a Shopping Lists merged product entries from both products and meals"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ShoppingListItem"
        '404':
          description: "No Shopping List found"
      tags:
        - ShoppingList
      parameters:
        - in: path
          name: shoppingListId
          required: true
          schema:
            type: integer
            format: int64

  /shoppingLists/{shoppingListId}/items/{productId}:
    post:
      operationId: checkShoppingListItem
      responses:
        '200':
          description: "Check a Shopping Lists Item"
        '404':
          description: "No Shopping List or Product found"
      tags:
        - ShoppingList
      parameters:
        - in: query
          name: checked
          schema:
            type: boolean
        - in: path
          name: shoppingListId
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: productId
          required: true
          schema:
            type: integer
            format: int64

components:
  schemas:
    Product:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    ProductEntry:
      type: object
      required:
        - product
        - quantity
      properties:
        id:
          type: integer
          format: int64
        product:
          $ref: "#/components/schemas/Product"
        quantity:
          $ref: "#/components/schemas/Quantity"
    ShoppingListItem:
      type: object
      properties:
        product:
          $ref: "#/components/schemas/Product"
        quantity:
          $ref: "#/components/schemas/Quantity"
        checked:
          type: boolean
    Quantity:
      type: object
      required:
        - amount
        - quantityType
      properties:
        amount:
          type: integer
          format: int64
        quantityType:
          type: string
    Meal:
      type: object
      required:
        - name
        - productEntries
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    ShoppingList:
      type: object
      required:
        - name
        - productEntries
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string